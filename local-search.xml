<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git基本操作</title>
    <link href="/2023/04/08/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/04/08/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="Git部分常用命令记录"><a href="#Git部分常用命令记录" class="headerlink" title="Git部分常用命令记录"></a>Git部分常用命令记录</h2><p><a href="https://gitee.com/all-about-git">git学习链接</a></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#将当前目录[或者新建project-name]转化为git仓库</span></span><br>git init [project-name] <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#关联远程仓库</span></span><br>git remote add &lt;remote-name[一般是origin]&gt; [url]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#删除远程仓库[解除本地和远程的绑定关系]</span></span><br>git remote rm &lt;remote-name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#下载项目和它的代码历史</span></span><br>git clone [url]<br><br>git config --global user.name &quot;name&quot; ##配置用户名<br>git config --global user.email &quot;hello@email.com&quot; ##配置邮箱<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#配置全局代理,会影响对国内仓库的访问速度</span></span><br>git config --global http.proxy http://127.0.0.1:[代理端口号] <br>git config --global https.proxy https://127.0.0.1:[代理端口号端口号]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#只配置github的代理</span></span><br>git config --global http.https://github.com.proxy https://127.0.0.1:[代理端口号端口号]<br>git config --global https.https://github.com.proxy https://127.0.0.1:[代理端口号端口号]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#编辑git配置文件</span></span><br>git config -e --global <br></code></pre></td></tr></table></figure><h3 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#显示配置</span></span><br>git config --list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#windows中配置文件位置</span></span><br>C:\Users\用户名\.gitconfig<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#历史查看</span></span><br>git log ##显示当前分支版本历史<br>git log --stat ##显示commit历史、每次commit发生变更的文件<br>git log -S &lt;key&gt; ##根据key搜素commit历史<br>git reflog ##查看所有分支的所有操作记录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#内容修改查看</span></span><br>git diff ##显示暂存区和工作区的区别<br>git diff HEAD ##显示工作区和当前HEAD之前的差别<br>git show &lt;commit&gt; ##显示某次提交的元数据和内容变化<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#查看文件状态</span></span><br>git status [-s(精简显示)] <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看分支</span><br>git branch #本地<br>git branch -r #远程<br>git branch -a #本地+远程<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看远程库信息</span><br>git remote -v<br></code></pre></td></tr></table></figure><h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#修改添加</span></span><br>git add &lt;file1&gt; &lt;file2&gt; ... ##添加文件到暂存区<br>git add . ##所有添加的修改放到暂存区，不包括删除<br>git add -A ##保存所有修改到暂存区<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#Commit</span></span><br>git commit -m&quot;提交注释&quot;<br>git commit --amend  ##对commit的内容进行修改并且不起一个新commit<br></code></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#创建分支</span></span><br>git branch &lt;name&gt; &lt;commit&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#强制重定位name对应分支</span></span><br>git branch -f &lt;name&gt; &lt;commit&gt; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#在commit处加一个tag(tag相当于锚点)</span></span><br>git tag &lt;tag name&gt; &lt;commit&gt; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#输出commit的最近祖先tag 格式为  &lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash(commit的)&gt;</span></span><br>git describe &lt;commit&gt; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#删除分支</span></span><br>git branch -d &lt;commit&gt; ##本地<br>git branch origin --delete &lt;branch-name&gt; ##远程<br>git branch -dr &lt;origin/branch&gt; ##远程<br></code></pre></td></tr></table></figure><h4 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout &lt;commit&gt; ##head指向commit对应位置<br>git checkout -b &lt;name&gt; &lt;commit&gt; ##在commit上创建一个名字为name的分支并让head指向它<br>git reset &lt;commit&gt; ##本地回退到commit<br>git revert &lt;commit&gt; ##撤销commit对应的版本，并且撤销的版本也作为一个版本<br></code></pre></td></tr></table></figure><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#继承合并</span></span><br>git merge &lt;name&gt; ##把name分支的修改合并到当前节点<br>git merge --abort ##取消合并<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#线性合并</span></span><br>git rebase &lt;name1&gt; &lt;name2&gt; ##把name2放到name1后面合并<br>git rebase -i commit   ##重新排列当前位置到commit之间的内容<br>git cherry-pick [commit list] ##把commit的改动按顺序添加到当前HEAD后面<br><br></code></pre></td></tr></table></figure><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><h4 id="分支跟踪"><a href="#分支跟踪" class="headerlink" title="分支跟踪"></a>分支跟踪</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#本地localname分支跟踪远程仓库name分支</span></span><br>git branch -u &lt;origin/name&gt; &lt;branch&gt; <br>git branch --set-upstream &lt;branch&gt; &lt;remote-branch&gt;<br></code></pre></td></tr></table></figure><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch:"></a>fetch:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git fetch ##下载全部远程内容，但是不会移动本地HEAD<br>git fetch origin foo ##只下载foo分支的内容<br>git fetch origin &lt;source(远程仓库的分支)&gt;:&lt;destination(本地分支)&gt; ##把远程source分支的内容下载到destination分支后面,并更新本地destination分支,特别的，source为空的时候在本地创建分支<br></code></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push:"></a>push:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin &lt;commit&gt; ##切到本地的commit分支，获取所有提交，再到远程仓库对应的跟踪分支中，把远程没有的提交记录都添加上去<br>git push origin &lt;source(本地commit)&gt;:&lt;destination(远处分支)&gt; ##不使用跟踪分支而指定destination，source为空的时候会删除远处分支<br></code></pre></td></tr></table></figure><h4 id="pull"><a href="#pull" class="headerlink" title="pull:"></a>pull:</h4><p>相当于fetch和merge的复合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin foo =&gt; git fetch origin; git merge o/foo;<br>git pull origin &lt;source&gt;:&lt;bugFix&gt; =&gt; git fetch origin source:bugFix; git merge bugFix;<br>git pull origin &lt;source&gt;:&lt;bugFix&gt; --rebase =&gt; git fetch origin source:bugFix; git rebase bugFix;<br></code></pre></td></tr></table></figure><h3 id="自定义内容"><a href="#自定义内容" class="headerlink" title="自定义内容"></a>自定义内容</h3><h4 id="忽略特殊文件-gitignore"><a href="#忽略特殊文件-gitignore" class="headerlink" title="忽略特殊文件:  .gitignore"></a>忽略特殊文件:  .gitignore</h4><p><a href="https://github.com/github/gitignore">现成的文件内容</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs PHP">在.gitignore中再加入自定义的不想提交的文件<br>file1<br>file2<br>...<br></code></pre></td></tr></table></figure><p>如果想强制添加一个符合ignore规则的文件，用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> -f filename<br></code></pre></td></tr></table></figure><p>查看哪个规则把文件忽略了</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">git<span class="hljs-built_in"> check-ignore </span>-v App.class<br></code></pre></td></tr></table></figure><p>也可以定义特殊的不可被ignore的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">不排除.gitignore和App.class:</span><br>!.gitignore<br>!App.class<br></code></pre></td></tr></table></figure><h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global alias.[st] [status] #设置status的别名为st<br><span class="hljs-meta prompt_">#</span><span class="language-bash">加global是针对用户，如果不加global则配置的是当前仓库的变量(位于.git/config)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">用户的git配置文件在用户主目录下的.gitconfig中</span><br></code></pre></td></tr></table></figure><img src="/2023/04/08/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/git.png" class="" title="HelloGit">]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
